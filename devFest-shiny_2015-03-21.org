#+title: An introduction to =shiny=
#+author: John Henderson
#+email: jw.hendy@gmail.com
#+date: 21 March 2015
#+setupfile: "~/org/aux/beamer-setup.org"
#+startup: beamer
#+latex_class_options: [sans,aspectratio=169,presentation,bigger,fleqn]
#+options: H:1
#+latex_header: \usepackage{lmodern}
#+latex_header: \usetheme[alternativetitlepage=true,titleline=true]{Torino}
#+latex_header: \usecolortheme{freewilly}

* Why =R=?

Indeed; why in the world subject yourself to:
- =<-=
- =%in%=
- foo$bar
- foo[, "bar"]
- lists
- =lapply()= vs. =for()=

* Why =R=?

R is built for statistics and data
- I picked up =R= as an alternative to Minitab
- Cross-platform consistency
- Great plotting/graphics with =ggplot2= and =lattice=
- Incredible data manipulation (=melt()=, =ddply()=, subsetting)
- Huge package repository

* Why =R=?

But =R= for interactive web graphics??

- Requires ~0 =html/javascript= knowledge
- I find it faster to write (e.g. vs. =d3.js=)
- If you already use =R=, =shiny= makes the next step easy
- Nice for quick prototypes/sketches
- Exploratory analysis


* Basics

=shiny= is an =R= package that enables web based applications
- Overview of =shiny= basics
- Some examples
- The code/data necessary to reproduce anything in this talk is on [[https://github.com/jwhendy/devFest-shiny_2015][github]]
  - https://github.com/jwhendy/devFest-shiny_2015

* Basics

- You can't do anything in =shiny= without knowing how to do it in =R= locally
- =shiny= needs to operate inside of [[http://www.rstudio.com/][RStudio]]
- [At least] two files are required to run an application
  - =ui.R=: page format, user inputs, and outputs you're going to create
  - =server.R=: contains the R code which will generate your dynamic output

\vspace{0.5cm}

Don't forget to run =install.packages("shiny")=!

* Minimal =ui.R= 
#+latex: \scriptsize 
#+begin_src R :session r :results silent :exports code :eval no
library(shiny)
# page format
shinyUI(pageWithSidebar(
  # title
  headerPanel("Hello Shiny!"),

  sidebarPanel(
    # user inputs go here
  ),

  mainPanel(
    plotOutput("plot") # what you're going to output, e.g. a plot
  )
))

#+end_src
#+latex: \scriptsize

* Minimal =server.R=

#+latex: \scriptsize 
#+begin_src R :session r :results silent :exports code :eval no

library(shiny)

shinyServer(function(input, output) {

  # general R code here: load libraries, set variables/functions/etc.

  # output$name has to match ui.R's plotOutput("name")
  output$plot <- renderPlot({

    # code to make a plot goes here

  })
})

#+end_src
#+latex: \scriptsize

* It works!

- Create the above files...

#+latex: \scriptsize
#+begin_src R :session r :exports code :results silent :eval no
# run from within R studio
library(shiny)
setwd("/path/to/ui-and-server.R")
runApp()
#+end_src

#+begin_center
#+attr_latex: :height 3.75cm
[[./img/shiny-template.png]]
#+end_center
* Lots of choices

** Input elements					      :B_block:BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: block
   :END:

- checkbox
- date (single/range)
- file upload
- numeric/text box
- dropdown
- slider (single/double)

** Output methods					      :B_block:BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: block
   :END:

- html
- image
- plot
- table
- text
- [rendered] markdown

* Example: data analysis/exploration

- Enable rapid and dynamic switching of plot variables
- Allows for "plot prototyping" to examine trends/relationships
- Web-based solution is easily sharable with others

* Fiddling with public transportation data

- Grabbed data on public transportation centers around US (more [[https://github.com/tcrug/public-transpo][here]])
- Some are quite efficient, some are horrible
- Can =shiny= help find some interesting tidbits?

\pause

[[https://jwhendy.shinyapps.io/transpo-exploration/][*Demo time!*]]

* Example: interactive contour plots

- Applied machine learning in =R= on product test data
- Contour plots can be nice for visualizing effect of inputs vs. outputs
- Static plots with lots of inputs/outputs can be cluttered; difficult to show all the
  data in one place
- How to share the results with co-workers who don't use =R=?

\pause

[[https://jwhendy.shinyapps.io/interactive-contour/][*Demo time!*]]

* Example: =shiny= + =rCharts=

- =rCharts= brings an =R= interface to several existing =javascript= visualization
  libraries 
- Easy way to make interactive graphics without =shiny=
- Customization can be tricky; some =javascript= knowledge required
- While generals are done in =R= with a unified syntax, manipulations of plot elements is
  still often library-specific

* Exploring sensor data

- Movement profile data for test equipment via laser sensor
- Constant and ramp movement profiles
- Ballpark min/max/mean for target setpoint?
- What does the acceleration look like for ramped modes?
- Ability to plot a lot of data and filter on the fly

\pause

[[https://jwhendy.shinyapps.io/shiny-rcharts/][*Demo time!*]]

* Example: visualizing insurance costs

- Benefit plan choices are tough!
- Started making visualizations/walkthroughs at 3M in 2011
- Goal: simplify decision process through visualization

* The main issue

- HR typically sends you a table like this on glossy paper; which plan is best?

#+attr_latex: align=|l|l|l|
|-----------------+---------+---------|
|                 | Plan A  | Plan B  |
|-----------------+---------+---------|
| Premium         | $150/mo | $250/mo |
| 3M Contribution | $1,000  | $0      |
| Deductible      | $2,500  | $750    |
| $OOP_{max}$     | $5,000  | $4,000  |
|-----------------+---------+---------|

* The main issue

- These employees are not smiling because they understood the table

#+begin_center
#+attr_latex: :height 5cm
[[./img/choosing-insurance.jpg]]
#+end_center

#+latex: \tiny
Image credit: http://jtsfs.com/employee-benefits-2/group-health-insurance/

* In 2011, it was so simple!

#+begin_center
#+attr_latex: :height 6.5cm
[[./img/ins-intersections.pdf]]
#+end_center

* Fast-foward to 2013
- 3M introduces split deductibles on two plans
- Now which plan is best?

#+latex: \footnotesize
| Plan | Premium | \(Ded_{ind}\) | \(Ded_{tot}\) | \(OOP_{ind}\) | \(OOP_{tot}\) | \(HSA\) |
|------+---------+---------------+---------------+---------------+---------------+---------|
| A    | $3,500  | $500          | $1,000        | $2,000        | $4,000        | -       |
| B    | $2,200  | -             | $2,750        | -             | $5,500        | $1,250  |
| C    | $600    | $2,750        | $5,500        | $5,500        | $11,000       | $1,250  |
#+latex: \normalsize

* First shot

- Now we need axes for max spender vs. everyone else... contour plot!

#+begin_center
#+attr_latex: :height 5.5cm
[[./img/ins-contour.pdf]]
#+end_center

* Winning cost map

- "Stack" the contours, figure out which one is lowest

#+begin_center
#+attr_latex: :height 5.5cm
[[./img/ins-cost-map.pdf]]
#+end_center

* Is there a better way?

- =shiny=, obviously!
- Dynamic UI elements for # of people on plan
- "Interesting" [[http://stackoverflow.com/questions/18116967/dealing-with-conditionals-in-a-better-manner-than-deeply-nested-ifelse-blocks][algorithm]] for dealing with complex criteria
- Hosted internally at 3M  with =shiny-server= 
- Put an anonymized version on [[https://www.shinyapps.io/][shinyapps.io]]

* Table of possible outcomes

#+begin_center
#+latex: \tiny
#+name: binary_conversion
| ded_ind | oop_ind | ded_rem | oop_rem | ded_tot | oop_tot | bin | formula                                     |
|---------+---------+---------+---------+---------+---------+-----+---------------------------------------------|
|       0 |       0 |       0 |       0 |       0 |       0 |   0 | exp_ind + exp_rem                           |
|       1 |       0 |       0 |       0 |       0 |       0 |   1 | ded_ind + 0.1 (exp_ind - ded_ind) + exp_rem |
|       0 |       0 |       1 |       0 |       0 |       0 |   4 | exp_ind + exp_rem                           |
|       1 |       0 |       0 |       0 |       1 |       0 |  17 | ded_ind + 0.1 (exp_ind - ded_ind) + exp_rem |
|       1 |       1 |       0 |       0 |       1 |       0 |  19 | oop_ind + exp_rem                           |
|       0 |       0 |       1 |       0 |       1 |       0 |  20 | ded_tot + 0.1 (exp_ind + exp_rem - ded_tot) |
|       1 |       0 |       1 |       0 |       1 |       0 |  21 | ded_tot + 0.1 (exp_ind + exp_rem - ded_tot) |
|       1 |       1 |       1 |       0 |       1 |       0 |  23 | oop_ind + ded_ind + 0.1 (exp_rem - ded_ind) |
|       1 |       0 |       1 |       1 |       1 |       0 |  29 | ded_tot + 0.1 (exp_ind + exp_rem - ded_tot) |
|       1 |       1 |       0 |       0 |       1 |       1 |  51 | oop_ind + exp_rem                           |
|       1 |       1 |       1 |       0 |       1 |       1 |  55 | oop_ind + ded_ind + 0.1 (exp_rem - ded_ind) |
|       1 |       0 |       1 |       1 |       1 |       1 |  61 | oop_tot                                     |
|       1 |       1 |       1 |       1 |       1 |       1 |  63 | oop_tot                                     |
#+latex: \normalsize
#+end_center

* Check against criteria; convert to binary

#+latex: \scriptsize
#+begin_example
  test_case <- c(rep(c(exp_ind, exp_rem, exp_ind + exp_rem),   # vector of predicted costs
                     each = 2))                                # for max vs. others

  test_case <- rbind(test_case, test_case, test_case)          # three sets for three plans
  
  limits <- cbind(compare$ded_ind, compare$exp_max_ind,        # criteria values
                  compare$ded_ind, compare$exp_max_ind, 
                  compare$ded_tot, compare$exp_max_tot)
  
  result <- cbind(compare[, c("ded_ind", "ded_tot", "oop_ind", # store cutoffs in result
                              "oop_tot", "prem", "hsa")],
                  exp_ind, exp_rem,
                  (test_case > limits) %*% (2^(0:5)))          # convert T/F to binary
#+end_example
#+latex: \normalsize

* Hacky function lookup

#+latex: \tiny
#+begin_example
map_funcs <- list(
  "0" = function(binary) { binary$exp_ind + binary$exp_rem }, 
  "1" = function(binary) { binary$ded_ind + (0.1* (binary$exp_ind - binary$ded_ind)) + binary$exp_rem }, 
  "4" = function(binary) { binary$exp_ind + binary$exp_rem }, 
  "16" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) },
  "17" = function(binary) { binary$ded_ind + (0.1* (binary$exp_ind - binary$ded_ind)) + binary$exp_rem },
  "19" = function(binary) { binary$oop_ind + binary$exp_rem }, 
  "20" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) }, 
  "21" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) }, 
  "23" = function(binary) { binary$oop_ind + binary$ded_ind + (0.1 * (binary$exp_rem - binary$ded_ind)) },
  "28" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) },
  "29" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) },
  "48" = function(binary) { binary$oop_tot },   
  "51" = function(binary) { binary$oop_ind + binary$exp_rem }, 
  "55" = function(binary) { binary$oop_ind + binary$ded_ind + (0.1 * (binary$exp_rem - binary$ded_ind)) }, 
  "60" = function(binary) { binary$oop_tot }, 
  "61" = function(binary) { binary$oop_tot }, 
  "63" = function(binary) { binary$oop_tot }
)
#+end_example
#+latex: \normalsize

* 

\vfill
#+begin_center
'Nuff talk, let's take a [[https://jwhendy.shinyapps.io/insurance-visualizer/][look]]!
#+end_center
\vfill

* So, why /are/ they smiling?

- Perhaps they were just playing with =shiny=!

#+begin_center
#+attr_latex: :height 5cm
[[./img/choosing-insurance.jpg]]
#+end_center

#+latex: \vspace{-0.5cm}

#+latex: \tiny
Image credit: http://jtsfs.com/employee-benefits-2/group-health-insurance/

* Sharing =shiny= apps

- tar/zip all files, send, have user run locally
- Install [[http://www.rstudio.com/shiny/server/][shiny-server]] on local machine

- Request account on /new/ RStudio server [[https://www.shinyapps.io/admin/#/signup][here]]
  - Create apps locally, then follow setup [[http://shiny.rstudio.com/articles/shinyapps.html][instructions]]
  - When satisfied, just run =deployApp()=!
  - App goes live at http://uname.shinyapps.io/appName/

* References

- [[http://shiny.rstudio.com/tutorial/][Getting started]] with =shiny= 
- =shiny= [[https://groups.google.com/forum/#!forum/shiny-discuss][mailing list]]
- RStudio server account [[https://shinyapps.io/][request]]
- [[http://stackoverflow.com/questions/19130455/create-dynamic-number-of-input-elements-with-r-shiny][SO question]] on creating dymanic input elements
- [[http://stackoverflow.com/questions/17683933/set-global-object-in-shiny][SO question]] on global variables (not intuitive!)
- [[http://stackoverflow.com/questions/17838709/scale-and-size-of-plot-in-rstudio-shiny][SO question]] on sizing plots in =shiny=
- [[http://stackoverflow.com/questions/17958730/faceting-a-set-of-contour-plots-in-ggplot-r][SO question]] that solved my contour plot issue; repaid with =shiny= example

* Apps in this presentation
- [[https://jwhendy.shinyapps.io/transpo-exploration/][Transpo exploration]]
- [[http://spark.rstudio.com/jwhendy/interactive-contour/][Interactive contour]]
- [[https://jwhendy.shinyapps.io/shiny-rcharts/][rCharts example]]
- [[http://spark.rstudio.com/jwhendy/insurance-visualizer/][Benefit analysis]]
- Everything's also on [[https://github.com/jwhendy/devFest-shiny_2015][github]]!
* Tools

Presentation made entirely with open source software!

#+begin_center
#+attr_latex: :booktabs nil
| <10>       | <10>       | <10>       | <10>       | <10>       |
| \includegraphics[height=1.5cm]{./img/emacs.png} | \includegraphics[height=1.5cm]{./img/org-mode.png} | \includegraphics[height=1.5cm]{./img/r.png} | \includegraphics[height=1.5cm]{./img/r-studio.png} | \includegraphics[height=1.5cm]{./img/arch.png} |
#+end_center

- [[http://www.gnu.org/software/emacs/][Emacs]] and [[http://orgmode.org/][Org-mode]] for reproducible code environment
- [[http://www.latex-project.org/][\LaTeX]] / [[http://www.ctan.org/tex-archive/macros/latex/contrib/beamer/][Beamer]] for typesetting
- [[http://blog.barisione.org/2007-09/torino-a-pretty-theme-for-latex-beamer/][Torino]] Beamer theme so that it wasn't obvious I was using Beamer

* 

#+latex: \LARGE
#+begin_center
Questions?

\vspace{1.5cm}

#+latex: \normalsize
Come say "Hi" at the [[http://www.meetup.com/twincitiesrug/][TC R Users Group]] to learn more :)

#+end_center
